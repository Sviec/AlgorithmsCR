#include "algorithms.h"
#include <iostream>
#include <vector>
#include <string>

using namespace std;

/*
Вывести маршрут максимальной стоимости

В левом верхнем углу прямоугольной таблицы размером N?M находится черепашка. 
В каждой клетке таблицы записано некоторое число. Черепашка может перемещаться вправо или вниз, 
при этом маршрут черепашки заканчивается в правом нижнем углу таблицы.

Подсчитаем сумму чисел, записанных в клетках, через которую проползла черепашка (включая начальную и конечную клетку). 
Найдите наибольшее возможное значение этой суммы и маршрут, на котором достигается эта сумма.

Формат ввода
В первой строке входных данных записаны два натуральных числа N и M, не превосходящих 100 — размеры таблицы. 
Далее идет N строк, каждая из которых содержит M чисел, разделенных пробелами — описание таблицы. 
Все числа в клетках таблицы целые и могут принимать значения от 0 до 100.

Формат вывода
Первая строка выходных данных содержит максимальную возможную сумму, вторая — маршрут, на котором достигается эта сумма. 
Маршрут выводится в виде последовательности, которая должна содержать N-1 букву D, означающую передвижение вниз и M-1 букву R, 
означающую передвижение направо. Если таких последовательностей несколько, необходимо вывести ровно одну (любую) из них.
*/

void show_route_at_high_cost() {
	int n, m;
	cin >> n >> m;

	vector<vector<int>> matrix(n, vector<int>(m));

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			cin >> matrix[i][j];
		}
	}

    vector<vector<int>> dp(n, vector<int>(m, 0));
    vector<vector<string>> way(n, vector<string>(m, ""));

    dp[0][0] = matrix[0][0];
    way[0][0] = "";

    for (int j = 1; j < m; ++j) {
        dp[0][j] = dp[0][j - 1] + matrix[0][j];
        way[0][j] = way[0][j - 1] + "R ";
    }

    for (int i = 1; i < n; ++i) {
        dp[i][0] = dp[i - 1][0] + matrix[i][0];
        way[i][0] = way[i - 1][0] + "D ";
    }

    for (int i = 1; i < n; ++i) {
        for (int j = 1; j < m; ++j) {
            if (dp[i - 1][j] > dp[i][j - 1]) {
                dp[i][j] = matrix[i][j] + dp[i - 1][j];
                way[i][j] = way[i - 1][j] + "D ";
            }
            else {
                dp[i][j] = matrix[i][j] + dp[i][j - 1];
                way[i][j] = way[i][j - 1] + "R ";
            }

        }
    }

    cout << dp[n - 1][m - 1] << endl;
    cout << way[n - 1][m - 1] << endl;

}
